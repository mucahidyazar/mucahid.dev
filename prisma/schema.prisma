datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Comment {
  id            Int     @id @default(autoincrement())
  message       String
  author        User    @relation(fields: [authorId], references: [id])
  postId        String
  authorId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum MessageType {
  EMAIL
  MESSAGE
  BOARD
}

model Message {
  id        Int     @id @default(autoincrement())
  title     String
  type      MessageType
  content   String
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  refresh_token_expires_in        Int?
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope             String?
  id_token           String?
  session_state      String? @map("session_state")
  oauth_token_secret  String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  @@unique([provider, providerAccountId])
}

model Metamask {
  id                Int     @id @default(autoincrement())
  walletId          String
  author            User?   @relation(fields: [authorId], references: [id])
  authorId          Int?
}

model News {
  id            Int     @id @default(autoincrement())
  title         String
  content       String
  author        User    @relation(fields: [authorId], references: [id])
  authorId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  location      String?
  image         String?
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  metamask      Metamask?
  newsletter    Boolean? @default(false)
  news          News[]
  role          Role     @default(MEMBER)
  comments      Comment[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model NewsLetter {
  id            Int     @id @default(autoincrement())
  name          String?
  email         String   @unique
}