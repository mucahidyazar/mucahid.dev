name: 'Pre-release @mucahid.dev'
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release.'
        required: true

jobs:
  vercel:
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100

      # Cache dependencies for faster build time in future
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Setup Node.js
      - name: Setup Node 16
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Check is there changes which is need to build
      - name: Check is there any necessary changes for build
        id: has-changed
        uses: MarceloPrado/has-changed-path@v1.0
        with:
          paths: __paths__ lib pages prisma src types

      # If there is changes then build
      - name: Build
        if: steps.has-changed.outputs.changed == 'true'
        run: |
          yarn install --frozen-lockfile
          yarn build
          mkdir BUILD
          cp -r public BUILD/public
          cp -r package.json BUILD/package.json
          cp -r pnpm-lock.yaml BUILD/pnpm-lock.yaml
          mv .next BUILD/.next

      # If there is changes then let the tests runs
      # - name: Run Tests Locally
      #   if: steps.has-changed.outputs.changed == 'true'
      # run: yarn test:ci

      # If there is changes then deploy to stagging on vercel
      - name: Deploy to Staging
        if: steps.has-changed.outputs.changed == 'true'
        id: deploy-vercel-staging
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      # If there is changes then run the tests against vercel
      # - name: Run Tests Against Vercel
      #   if: steps.has-changed.outputs.changed == 'true'
      #   env:
      #     VERCEL_URL: ${{ steps.deploy-vercel-staging.outputs.preview-url }}
      #   run: yarn test:ci

      # Prepare pre-release files from BUILD directory
      - name: Prepare pre-release files
        if: steps.has-changed.outputs.changed == 'true'
        run: |
          echo $GITHUB_REF_NAME
          cd BUILD && tar -zcf ../pre-release-$GITHUB_REF_NAME.tar.gz . && cd .. && ls -la

      # then create a pre-release
      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.RELEASE_SECRET }}'
          automatic_release_tag: 'pre-release'
          prerelease: true
          title: 'Development Build'
          files: |
            pre-release.tar.gz

      - name: Create release branch
        run: |
          git checkout -b release/${{ github.event.inputs.version }}
      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.

      - name: Initialize mandatory git config
        run: |
          git config user.name "Mucahid Yazar"
          git config user.email mucahidyazar@gmail.com

      - name: Conventional Changelog Action
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.RELEASE_SECRET }}
          git-message: 'chore(release): {version}'
          git-user-name: 'Github Action'
          git-user-email: 'github@actions.com'
          tag-prefix: 'v'
          output-file: 'CHANGELOG.md'
          skip-git-pull: 'true'
      # This step will differ depending on your project setup
      # Fortunately, yarn has a built-in command for doing this!

      - name: Bump version in package.json
        run:
          yarn version --new-version ${{ github.event.inputs.version }}
          --no-git-tag-version

      - name: Commit changelog and manifest files
        id: make-commit
        # git add CHANGELOG.md package.json
        run: |
          git add package.json
          git commit --message "Prepare release ${{ github.event.inputs.version }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch
        run: |
          git push origin release/${{ github.event.inputs.version }}
          GITHUB_REF=$(echo $GITHUB_REF | sed -e "s#refs/heads/##g")
          git branch -D $GITHUB_REF
          git push origin --delete $GITHUB_REF

      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.RELEASE_SECRET }}
          destination_branch: 'main'
          source_branch: release/${{ github.event.inputs.version }}
          pr_title: Release version ${{ github.event.inputs.version }}
          pr_reviewer: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          pr_body: |
            Hi @${{ github.actor }}!
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.
            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.
